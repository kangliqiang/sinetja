package sinetja;

import io.netty.handler.codec.http.cors.CorsConfig;
import io.netty.handler.codec.http.router.Router;
import io.netty.handler.ssl.SslContext;
import io.netty.handler.ssl.SslContextBuilder;
import io.netty.handler.ssl.SslProvider;
import io.netty.handler.ssl.util.SelfSignedCertificate;

import java.io.File;
import java.nio.charset.Charset;
import java.security.cert.CertificateException;
import java.util.ArrayList;
import java.util.List;

import javax.net.ssl.SSLException;

import io.netty.bootstrap.ServerBootstrap;
import io.netty.channel.ChannelOption;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.nio.NioServerSocketChannel;
import io.netty.util.CharsetUtil;

public class Server extends Router<Action> {
    private static final int MAX_CONTENT_LENGTH = 1024 * 1024;

    //----------------------------------------------------------------------------
    // Config

    private String host;
    private int port;

    private SslContext sslContext = null;

    private int maxContentLength = MAX_CONTENT_LENGTH;

    /**
     * Default: UTF-8.
     */
    private Charset charset = CharsetUtil.UTF_8;

    private CorsConfig cors;

    private Action before;
    private Action after;
    private ErrorHandler error;

    //----------------------------------------------------------------------------

    public Server(int port) {
        this("0.0.0.0", port);
    }

    public Server(String host, int port) {
        this.host = host;
        this.port = port;

        notFound(new DefaultNotFoundHandler());
        error(new DefaultErrorHandler());
    }

    public SslContext sslContext() {
        return sslContext;
    }

    public Server sslContext(SslContext sslContext) {
        this.sslContext = sslContext;
        return this;
    }

    /**
     * Uses autogenerated selfsigned certificate.
     */
    public Server jdkSsl() throws SSLException, CertificateException {
        SelfSignedCertificate cert = new SelfSignedCertificate();
        sslContext = SslContextBuilder.forServer(cert.certificate(), cert.privateKey())
                .sslProvider(SslProvider.JDK)
                .build();
        return this;
    }

    public Server jdkSsl(String certChainFile, String keyFile) throws SSLException {
        sslContext = SslContextBuilder.forServer(new File(certChainFile), new File(keyFile))
                .sslProvider(SslProvider.JDK)
                .build();
        return this;
    }

    public Server jdkSsl(String certChainFile, String keyFile, String keyPassword) throws SSLException {
        sslContext = SslContextBuilder.forServer(new File(certChainFile), new File(keyFile), keyPassword)
                .sslProvider(SslProvider.JDK)
                .build();
        return this;
    }

    /**
     * Uses autogenerated selfsigned certificate.
     */
    public Server openSsl() throws SSLException, CertificateException {
        SelfSignedCertificate cert = new SelfSignedCertificate();
        sslContext = SslContextBuilder.forServer(cert.certificate(), cert.privateKey())
                .sslProvider(SslProvider.OPENSSL)
                .build();
        return this;
    }

    public Server openSsl(String certChainFile, String keyFile) throws SSLException {
        sslContext = SslContextBuilder.forServer(new File(certChainFile), new File(keyFile))
                .sslProvider(SslProvider.OPENSSL)
                .build();
        return this;
    }

    public Server openSsl(String certChainFile, String keyFile, String keyPassword) throws SSLException {
        sslContext = SslContextBuilder.forServer(new File(certChainFile), new File(keyFile), keyPassword)
                .sslProvider(SslProvider.OPENSSL)
                .build();
        return this;
    }

    //----------------------------------------------------------------------------

    public int maxContentLength() {
        return maxContentLength;
    }

    /**
     * Default max content length in request body is 1 MB.
     */
    public Server maxContentLength(int maxContentLength) {
        this.maxContentLength = maxContentLength;
        return this;
    }

    public Charset charset() {
        return charset;
    }

    public Server charset(Charset charset) {
        this.charset = charset;
        return this;
    }

    public CorsConfig cors() {
        return cors;
    }

    public Server cors(CorsConfig cors) {
        this.cors = cors;
        return this;
    }

    //----------------------------------------------------------------------------

    public Action before() {
        return before;
    }

    public Server before(Action before) {
        this.before = before;
        return this;
    }

    public Action after() {
        return after;
    }

    public Server after(Action after) {
        this.after = after;
        return this;
    }

    public ErrorHandler error() {
        return error;
    }

    public Server error(ErrorHandler error) {
        this.error = error;
        return this;
    }

    //----------------------------------------------------------------------------

    private List<EventLoopGroup> eventLoopGroups = new ArrayList<EventLoopGroup>();

    public void start() {
        Log.info(serverName() + " starting...");
        bootstrap().bind(host, port).awaitUninterruptibly();
        Log.info(serverName() + " started");
    }

    /**
     * Stops the server gracefully.
     * Do not call in action thread to avoid deadlock (start a new thread or use {@link #stopAtShutdown}).
     */
    public void stop() {
        Log.info(serverName() + " gracefully stopping...");
        for (EventLoopGroup g : eventLoopGroups) {
            g.shutdownGracefully().awaitUninterruptibly();
        }
        Log.info(serverName() + " gracefully stopped");
    }

    /**
     * Registers a JVM shutdown hook that calls {@link #stop} to stop the server gracefully.
     * After the hook has been registered, you can stop the server by running OS command {@code kill <PID>}.
     */
    public void stopAtShutdown() {
        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                Server.this.stop();
            }
        });
    }

    private String serverName() {
        return (sslContext == null)
                ? "http://" + host+ ":" + port + "/"
                : "https://" + host + ":" + port + "/";
    }

    private ServerBootstrap bootstrap() {
        NioEventLoopGroup bossGroup = new NioEventLoopGroup(1);
        NioEventLoopGroup workerGroup = new NioEventLoopGroup();

        eventLoopGroups.add(bossGroup);
        eventLoopGroups.add(workerGroup);

        return new ServerBootstrap()
                .group(bossGroup, workerGroup)
                .childOption(ChannelOption.TCP_NODELAY, java.lang.Boolean.TRUE)
                .childOption(ChannelOption.SO_KEEPALIVE, java.lang.Boolean.TRUE)
                .channel(NioServerSocketChannel.class)
                .childHandler(new PipelineInitializer(this));
    }
}
